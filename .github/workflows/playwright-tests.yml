name: CI/CD Pipeline for Playwright Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  playwrighttests:
    runs-on: ubuntu-latest

    container:
      image: mcr.microsoft.com/playwright:v1.47.2-focal
      env:
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: mydb
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U myuser" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Install wait-on
      run: npm install wait-on --save-dev  # Ensures wait-on is installed

    - name: Start application
      run: |
        chmod +x ./binaries/shopping-store-linux-amd64  # Corrected path to the binary inside repo
        ./binaries/shopping-store-linux-amd64 &  # Start the binary
      timeout-minutes: 3
      env:
        NODE_ENV: production

    - name: Wait for server to start
      run: npx wait-on http://localhost:2221

    - name: Check server health
      run: |
        for i in {1..10}; do
          curl -f http://localhost:2221/ && break || sleep 5;
        done || exit 1

    - name: Run Playwright tests
      run: npx playwright test --timeout=60000

    - name: Generate Playwright report
      run: npx playwright show-report

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report

    - name: Fix permissions for results.xml
      run: sudo chmod 777 results.xml

    - name: Upload Test Results (JUnit)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: results.xml

    - name: Clean up
      if: always()
      run: |
        jobs=$(jobs -p)
        if [ -n "$jobs" ]; then
          kill $jobs || echo "No background processes to kill"
        fi
        pkill -f shopping-store-linux-amd64 || true  # Ensure the app is terminated
        echo "Cleanup complete"
