name: CI/CD Pipeline for Playwright Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  playwrighttests:
    runs-on: ubuntu-latest

    container:
      image: mcr.microsoft.com/playwright:v1.47.2-focal
      env:
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Install wait-on
      run: npm install wait-on --save-dev  # Ensure wait-on is installed

    - name: Start application
      run: |
        chmod +x ./shopping-store-linux-amd64
        ./shopping-store-linux-amd64 & echo $! > pid.txt  # Start the app and track the PID for cleanup
      timeout-minutes: 3  # Increased to 3 minutes
      env:
        NODE_ENV: production

    - name: Wait for server to start
      run: npx wait-on http://localhost:2221 && sleep 10  # Wait for server to be fully up and running

    - name: Log running processes (for debugging)
      run: ps aux  # Log the running processes to verify the server is running

    - name: Check server health
      run: curl -f http://localhost:2221/ || exit 1  # Change the endpoint to '/' or adjust based on your app

    - name: Run Playwright tests
      run: npx playwright test --timeout=60000 --workers=4  # Run Playwright tests in parallel with 4 workers

    - name: Generate Playwright report
      run: npx playwright show-report

    - name: Upload Playwright report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report

    - name: Fix permissions for results.xml
      run: chmod 777 results.xml  # Remove 'sudo' from this line

    - name: Upload Test Results (JUnit)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: results.xml

    - name: Clean up
      if: always()
      run: kill $(cat pid.txt) || echo "No process to kill"  # Cleanup by killing the server process tracked by pid.txt
